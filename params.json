{
  "name": "MDI",
  "tagline": "Machine Description Interface",
  "body": "\r\n[![Build Status](https://api.travis-ci.org/guillon/mdi.png?branch=master)](https://travis-ci.org/guillon/mdi/branches)\r\n\r\nMachine Description Interface\r\n=============================\r\n\r\nThe Machine Description Interface (MDI) is an abstract\r\nAPI for access to some Machine Description System.\r\n\r\nThe API gives access to constructor and destructor for an abstract interface\r\nobject from which machine description elements can be accessed.\r\n\r\nThere is also an API for managing Operations instances through some Decoder,\r\nDisassembler, Assembler, Encoder and Execution.\r\n\r\nSynopsis\r\n========\r\n\r\nAn implementation of the API can be accessed for instance as:\r\n\r\n    /* mytest.c: printfs the list of instructions mnemonics. */\r\n\r\n    #include <assert.h>\r\n    #include <stdio.h>\r\n    #include <MDI/mdi.h>\r\n\r\n    int main(int argc, char *argv[]) {\r\n        MDI_rev_t rev;\r\n        MDI_res_t res;\r\n        MDI_idx_t idx;\r\n        MDI_interface_t interface;\r\n        res = MDI_interface_init(&interface, NULL);\r\n        assert(res == 0);\r\n\r\n        rev = MDI_interface_revision(interface);\r\n        assert(MDI_VERSION_REV_COMPATIBLE(MDI_VERSION_REV,rev));\r\n\r\n        for (idx = 0; idx < MDI_Instructions_count(interface); idx++) {\r\n            MDI_Instruction_t instruction;\r\n            instruction = MDI_Instructions_iter(interface, idx);\r\n            printf(\"Instruction idx %\"MDI_PRIidx\" mnemonic: %s\\n\", idx,\r\n                MDI_Instruction_mnemonic(instruction));\r\n        }\r\n\r\n        res = MDI_interface_fini(&interface);\r\n        assert(res == 0);\r\n        return 0;\r\n    }\r\n\r\nIf the MDI implementation is available in libmytarget.a for instance, compile\r\nthe test above with:\r\n\r\n    $ gcc -Wall -o mytest mytest.c libmytarget.a\r\n    $ ./mytest\r\n    Instruction idx 0 mnemonic: add\r\n    Instruction idx 1 mnemonic: sub\r\n    ...\r\nFor testing, one can use the example MINI platform description as in:\r\n\r\n    $ gcc -Wall -o minitest mytest.c /usr/local/libexec/mdi/mini/libmdi.a\r\n    $ ./minitest\r\n    Instruction idx 0 mnemonic: ld\r\n    Instruction idx 1 mnemonic: st\r\n    ...\r\n\r\n\r\nInstall\r\n=======\r\n\r\nInstall the MDI Interface headers, doc and test from sources with:\r\n\r\n    $ git clone https://github.com/guillon/mdi.git\r\n    $ cd mdi\r\n    $ make all\r\n    $ sudo make install PREFIX=/usr/local # This is the default prefix\r\n\r\nHere is the list of dependencies: gcc, make, python, doxygen.\r\n\r\nDocumentation\r\n=============\r\n\r\nRefer to the API documentation at https://guillon.github.io/mdi/doc/MDI/v0.2.\r\n\r\nIn particular the abstract objects documentations is described in the Modules\r\nsection of the documentation at\r\nhttps://guillon.github.io/mdi/doc/MDI/v0.2/modules.html.\r\n\r\nExamples\r\n========\r\n\r\nAn example implementation for an hypothetical platform called MINI is provided\r\nin https://github.com/guillon/mdi/tree/master/examples/mini.\r\n\r\nReferences\r\n==========\r\n\r\nGo to Home page at https://guillon.github.io/mdi.\r\n\r\nGet documentation at http://guillon.github.io/mdi/doc/MDI/v0.2.\r\n\r\nGet sources at https://github.com/guillon/mdi.\r\n\r\nCheck build status at https://travis-ci.org/guillon/mdi/branches.\r\n\r\nLicense\r\n=======\r\n\r\nThis software is provided under the term of the MIT License, ref to the\r\nCOPYING file for details.\r\n\r\nRef to the COPYRIGHT file for copyright information.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}